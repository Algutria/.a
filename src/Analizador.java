/* Analizador.java */
/* Generated By:JavaCC: Do not edit this line. Analizador.java */
public class Analizador implements AnalizadorConstants {
        public static void main(String[] args) throws ParseException
        {
                try
                {
                        Analizador compilador = new Analizador(System.in);
                        compilador.Analizar();
                        System.out.println("Compilador: Sentencia(s) aceptada(s).");

                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Compilador: Sentencia(s) no aceptada(s).");
                }
        }

// Variable —> letra [‘_’] Variable | [‘_’] dig [‘_’] Variable | λ
// Constante —> dig Constante | ‘,’ dig Constante | λ

// Validacion de la estructura 'input' --> Var=INPUT('          ');

// VarInput —> Variable ‘=‘ Input ‘(‘’ Mensaje ’’);’
// Input —> ‘input’ | ‘INPUT’
// Mensaje —> letra Mensaje | λ
  static final public void VarInput() throws ParseException {
    Variable();
    jj_consume_token(12);
    jj_consume_token(Input);
    jj_consume_token(13);
    Mensaje();
    jj_consume_token(14);
  }

  static final public void Mensaje() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Dig:{
      jj_consume_token(Dig);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case Simbolos:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:{
        Mensaje();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      break;
      }
    case Letra:{
      jj_consume_token(Letra);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case Simbolos:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:{
        Mensaje();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
      }
    case Simbolos:{
      jj_consume_token(Simbolos);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case Simbolos:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:{
        Mensaje();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
      }
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
        break;
        }
      case 16:{
        jj_consume_token(16);
        break;
        }
      case 17:{
        jj_consume_token(17);
        break;
        }
      case 18:{
        jj_consume_token(18);
        break;
        }
      case 19:{
        jj_consume_token(19);
        break;
        }
      case 20:{
        jj_consume_token(20);
        break;
        }
      case 21:{
        jj_consume_token(21);
        break;
        }
      case 22:{
        jj_consume_token(22);
        break;
        }
      case 23:{
        jj_consume_token(23);
        break;
        }
      case 12:{
        jj_consume_token(12);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case Simbolos:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:{
        Mensaje();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Validacion de sentencias:

// Sentencia —> Variable ’=’ P ’;’ Sentencia | λ
// P —> T Pprima
// Pprima —> ‘+’ T Pprima | ‘-’ T Pprima | λ
// T —> F Tprima
// Tprima —> ‘*’ F Tprima | ‘/’ F Tprima | λ
// F —> Constante | Variable | ‘(’ P ‘)’
  static final public void Sentencia() throws ParseException {
    Variable();
    jj_consume_token(12);
    P();
    jj_consume_token(21);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Letra:
    case PalabrasRA:{
      Sentencia();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void P() throws ParseException {
    T();
    Pprima();
  }

  static final public void Pprima() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 15:
    case 16:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
        T();
        Pprima();
        break;
        }
      case 16:{
        jj_consume_token(16);
        T();
        Pprima();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void T() throws ParseException {
    F();
    Tprima();
  }

  static final public void Tprima() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:
    case 18:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 18:{
        jj_consume_token(18);
        F();
        Tprima();
        break;
        }
      case 17:{
        jj_consume_token(17);
        F();
        Tprima();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void F() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Dig:
    case 22:
    case 23:{
      Constante();
      break;
      }
    case Letra:
    case PalabrasRA:{
      Variable();
      break;
      }
    case 19:{
      jj_consume_token(19);
      P();
      jj_consume_token(20);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Variable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Letra:{
      jj_consume_token(Letra);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case 24:{
        Var1();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      }
    case PalabrasRA:{
      jj_consume_token(PalabrasRA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case 24:{
        Var1();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Var1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Letra:{
      jj_consume_token(Letra);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        jj_consume_token(24);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case 24:{
        Var1();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
      }
    case Dig:
    case 24:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        jj_consume_token(24);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(Dig);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        jj_consume_token(24);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Letra:
      case Dig:
      case 24:{
        Var1();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Constante() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Dig:{
      jj_consume_token(Dig);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Dig:
      case 22:
      case 23:{
        Constante();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
      }
    case 22:
    case 23:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        jj_consume_token(23);
        break;
        }
      case 22:{
        jj_consume_token(22);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Dig);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Dig:
      case 22:
      case 23:{
        Constante();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Validacion de la estructura 'disp' --> DISP(Var); ó DISP(' ',Var,' ',Var....);

// VarDisp —> Disp M X ‘);’
// Disp —> ‘disp’ | ‘DISP’
// M —> Men Var
// Men —> ‘’’ Mensaje ‘’,’ | λ
// Var —> Variable
// X —> ‘,’ M X | λ
  static final public void VarDisp() throws ParseException {
    jj_consume_token(Disp);
    M();
    X();
    jj_consume_token(25);
  }

  static final public void M() throws ParseException {
    Men();
    Var();
  }

  static final public void Men() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 26:{
      jj_consume_token(26);
      Mensaje();
      jj_consume_token(27);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void Var() throws ParseException {
    Variable();
  }

  static final public void X() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
      M();
      X();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

// Creamos metodo validar para llamar a Analizar()
  static final public int Validar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Letra:
    case PalabrasRA:{
      Analizar();
      jj_consume_token(0);
{if ("" != null) return 1;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return -1;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// El metodo Analizar() concatena los 3 metodos ó las tres producciones principales
// Analizar —> VarInput Sentencia VarDisp
  static final public void Analizar() throws ParseException {
    VarInput();
    Sentencia();
    VarDisp();
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xff90e0,0xff90e0,0xff90e0,0xff9000,0xff90e0,0xff90e0,0x420,0x18000,0x18000,0x60000,0x60000,0xc80460,0x1000060,0x1000060,0x420,0x1000000,0x1000060,0x1000000,0x1000000,0x1000060,0x1000060,0xc00040,0xc00000,0xc00040,0xc00040,0x4000000,0x800000,0x421,};
   }

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
